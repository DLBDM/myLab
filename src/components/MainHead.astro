---
import '../styles/layout.scss';			// 导入布局样式
import '../styles/global.scss';			// 导入全局样式
interface Props {						// 定义MainHead组件的 props 接口
	title?: string | undefined;			// 页面标题
	description?: string | undefined;	// 页面描述
	keywords?: string | undefined;		// 页面关键词
}
const { title, description,keywords } = Astro.props;	// 解析传递给该组件的props接口数据
---

<meta charset="UTF-8" />		<!-- 设置页面字符编码为 UTF-8，告诉浏览器使用utf8来解析该页面中的字符 -->
<meta name="description" property="og:description" content={description} />		<!-- 设置页面描述，搜索引擎结果页面下方的页面摘要部分 -->
<meta name="keywords" content={keywords} />										<!-- 设置页面关键词， -->
<link rel="sitemap" href="/sitemap-index.xml" />								<!-- 站点地图的文件路径 -->
<link rel="alternate" type="application/rss+xml" title={title} href={new URL("rss.xml", Astro.site)} />		<!-- 设置 RSS 提要的链接 -->



<!-- <script src="http://api.map.baidu.com/api?v=2.0&ak=ZbICriNT4c5zrjP3IzvKq2IJ4g4uYuNZ" type="text/javascript"></script> -->

<meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">					<!-- 设置 IE 浏览器的兼容模式，强制使用 Edge 或 Chrome 内核 -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">	<!-- 设置视口配置，确保页面适应移动设备，禁止用户缩放 -->
<meta name="generator" content={Astro.generator} />								<!-- 设置页面生成器的信息 -->
<title>{title}</title>			<!-- 设置页面的标题 -->

<link rel="icon" type="image/svg+xml" href="/favicon.ico" />		<!-- 设置页面图标 -->


<!-- 内联 JavaScript 代码，用于根据用户偏好设置主题（暗色模式/亮色模式）
<script is:inline>	
	// 获取用户的主题偏好												
	const getThemePreference = () => {
		// 如果浏览器支持 localStorage 且有存储的主题偏好，返回存储的值
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		// 如果没有存储的主题偏好，根据操作系统的首选项返回暗色或亮色模式
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	// 判断当前主题是否为暗色模式
	const isDark = getThemePreference() === 'dark';
	// 根据主题选择，给 <HTML> 标签添加或移除 "theme-dark" 类   等效于<html class='theme-dark'>
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');
	// 如果浏览器支持 localStorage，监听主题变化并保存用户的选择
	if (typeof localStorage !== 'undefined') {
		// 创建一个 MutationObserver 对象，并定义回调函数，当HTML标签变化时被回调
		const observer = new MutationObserver(() => {
			// 判断 HTML 元素是否包含 "theme-dark" 类，表示当前是暗色模式
			const isDark = document.documentElement.classList.contains('theme-dark');
			// 将当前的主题偏好（暗色或亮色）存储到 localStorage 中
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		// 观察 HTML 元素的类属性变化（第一个参数为要监听的标签html，第二个参数为配置对象，定义要观察的变化类型（attributes: true表示属性变化）和具体细节（attributeFilter: ['class']表示class属性变化））
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script> -->
